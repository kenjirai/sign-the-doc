{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["HashFile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hashOutput","error","handleChange","bind","assertThisInitialized","handleSubmit","event","reader","FileReader","file","target","files","console","log","start","total","size","current","keccak256","self","onload","update","result","asyncUpdate","e","setState","toFixed","end","Math","min","readAsArrayBuffer","slice","hex","alert","value","preventDefault","react_default","a","createElement","onSubmit","type","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAkEeA,cA9Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAW,KACXC,MAAM,MAERT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACpBA,EAAKa,aAAeb,EAAKa,aAAaF,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAPHA,4EAUNc,GACX,IAAIC,EAAS,IAAIC,WACbC,EAAOH,EAAMI,OAAOC,MAAM,GAC9BC,QAAQC,IAAIJ,GACZ,IACIK,EAAQ,EACRC,EAAQN,EAAKO,KACbC,EAAUC,YACVC,EAAOxB,KACXY,EAAOa,OAAS,SAAUd,GACxB,IACEW,EAAUA,EAAQI,OAAOf,EAAMI,OAAOY,QACtCC,IACA,MAAMC,GACNL,EAAKM,SAAS,CAACxB,MAAMuB,MAGzB,IAAID,EAAc,WAChB,GAAIT,EAAQC,EAAO,CACjBH,QAAQC,IAAI,cAAgBC,EAAQC,EAAQ,KAAKW,QAAQ,GAAK,KAC9D,IAAIC,EAAMC,KAAKC,IAAIf,EAhBX,QAgB0BC,GAClCR,EAAOuB,kBAAkBrB,EAAKsB,MAAMjB,EAAOa,IAC3Cb,EAAQa,OAERR,EAAKM,SAAS,CAACzB,WAAWiB,EAAQe,SAGtCT,yCAGWjB,GACX2B,MAAM,2BAA6BtC,KAAKI,MAAMmC,OAC9C5B,EAAM6B,kDAIN,OACEC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMC,SAAU5C,KAAKU,cACnB+B,EAAAC,EAAAC,cAAA,qBAEEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,SAAU9C,KAAKO,gBAEpCkC,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASN,MAAM,YAE7BE,EAAAC,EAAAC,cAAA,oBAAY3C,KAAKI,MAAMC,oBAxDN0C,IAAMC,WCSTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAAcC,SAASC,eAAe,SD2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.35c664f1.chunk.js","sourcesContent":["import React from \"react\";\nimport { keccak256 } from 'js-sha3';\n\nclass HashFile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hashOutput:null,\n      error:null\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    var reader = new FileReader();\n    var file = event.target.files[0];\n    console.log(file);\n    var batch = 1024 * 1024 * 2;\n    var start = 0;\n    var total = file.size;\n    var current = keccak256;\n    var self = this;\n    reader.onload = function (event) {\n      try {\n        current = current.update(event.target.result);\n        asyncUpdate();\n      } catch(e) {\n        self.setState({error:e});\n      }\n    };\n    var asyncUpdate = function () {\n      if (start < total) {\n        console.log('hashing...' + (start / total * 100).toFixed(2) + '%');\n        var end = Math.min(start + batch, total);\n        reader.readAsArrayBuffer(file.slice(start, end));\n        start = end;\n      } else {\n        self.setState({hashOutput:current.hex()});\n      }\n    };\n    asyncUpdate();\n  }\n\n  handleSubmit(event) {\n    alert('An essay was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"file\" onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <p> result:{this.state.hashOutput}</p>\n\n    </div>\n    );\n  }\n}\n\nexport default HashFile;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport HashFile from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashFile />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}